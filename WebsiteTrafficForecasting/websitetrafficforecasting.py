# -*- coding: utf-8 -*-
"""WebsiteTrafficForecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YdCqwcMI72bBNdi-PVipUNMrbqtfbOh_
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_pacf
from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm

data = pd.read_csv("/content/drive/MyDrive/Thecleverprogrammer.csv")
print(data.head())

data["Date"] = pd.to_datetime(data["Date"],
                              format="%d/%m/%Y")
print(data.info())

plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(data["Date"], data["Views"])
plt.title("Daily Traffic of Thecleverprogrammer.com")
plt.show()

result = seasonal_decompose(data["Views"],
                            model='multiplicative',
                            period=30)
fig = plt.figure()
fig = result.plot()
fig.set_size_inches(15, 10)

pd.plotting.autocorrelation_plot(data["Views"])

plot_pacf(data["Views"], lags = 100)

p, d, q = 5, 1, 2
model=sm.tsa.statespace.SARIMAX(data['Views'],
                                order=(p, d, q),
                                seasonal_order=(p, d, q, 12))
model=model.fit()
print(model.summary())

predictions = model.predict(len(data), len(data)+50)
print(predictions)

data["Views"].plot(legend=True, label="Training Data",
                   figsize=(15, 10))
predictions.plot(legend=True, label="Predictions")

import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_pacf

# Kullanıcıdan dosya yolunu alma
file_path = input("CSV dosyasının yolunu girin: ")

# Veri okuma
data = pd.read_csv(file_path)
print(data.head())

# Tarih sütununu datetime formatına çevirme
data["Date"] = pd.to_datetime(data["Date"], format="%d/%m/%Y")
print(data.info())

# Görselleştirme
plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(data["Date"], data["Views"])
plt.title("Daily Traffic of Thecleverprogrammer.com")
plt.show()

# Seasonal Decomposition
period = int(input("Seasonal decomposition için period değerini girin (örneğin: 30): "))
result = seasonal_decompose(data["Views"], model='multiplicative', period=period)
fig = plt.figure()
fig = result.plot()
fig.set_size_inches(15, 10)

# Otokorelasyon Grafiği
pd.plotting.autocorrelation_plot(data["Views"])

# PACF Grafiği
plot_pacf(data["Views"], lags=100)

# ARIMA model parametreleri için input alma
p = int(input("ARIMA modelinin p parametresini girin: "))
d = int(input("ARIMA modelinin d parametresini girin: "))
q = int(input("ARIMA modelinin q parametresini girin: "))

# SARIMAX Modeli
seasonal_period = int(input("Seasonal period (12 aylık dönem) için değer girin: "))
model = sm.tsa.statespace.SARIMAX(data['Views'],
                                  order=(p, d, q),
                                  seasonal_order=(p, d, q, seasonal_period))
model = model.fit()
print(model.summary())

# Tahmin Süresi
forecast_length = int(input("Kaç günlük tahmin yapılacak? : "))
predictions = model.predict(len(data), len(data) + forecast_length)
print(predictions)

# Sonuçları Görselleştirme
data["Views"].plot(legend=True, label="Training Data", figsize=(15, 10))
predictions.plot(legend=True, label="Predictions")
plt.show()

