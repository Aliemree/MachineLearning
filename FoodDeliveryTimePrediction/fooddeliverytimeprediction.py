# -*- coding: utf-8 -*-
"""FoodDeliveryTimePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I4S7MgRgYgagcHoY-2PCWyFm4BlKL9Ca
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px


file_path = "/content/drive/MyDrive/Colab Notebooks/299PyhtonProject/Delivery time/deliverytime.txt"
try:
    data = pd.read_csv(file_path)
    print("Veri kümesi başarıyla yüklendi. İlk birkaç satır:")
    print(data.head())  # İlk 5 satırı gösterir
except FileNotFoundError:
    print(f"Belirtilen dosya yolunda dosya bulunamadı: {file_path}")
except Exception as e:
    print(f"Beklenmeyen bir hata oluştu: {e}")

data.info()

data.isnull().sum()

"""Calculating Distance Between Two Latitudes and Longitudes

"""

# Set the earth's radius (in kilometers)
R = 6371

# Convert degrees to radians
def deg_to_rad(degrees):
    return degrees * (np.pi/180)

# Function to calculate the distance between two points using the haversine formula
def distcalculate(lat1, lon1, lat2, lon2):
    d_lat = deg_to_rad(lat2-lat1)
    d_lon = deg_to_rad(lon2-lon1)
    a = np.sin(d_lat/2)**2 + np.cos(deg_to_rad(lat1)) * np.cos(deg_to_rad(lat2)) * np.sin(d_lon/2)**2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))
    return R * c

# Calculate the distance between each pair of points
data['distance'] = np.nan

for i in range(len(data)):
    data.loc[i, 'distance'] = distcalculate(data.loc[i, 'Restaurant_latitude'],
                                        data.loc[i, 'Restaurant_longitude'],
                                        data.loc[i, 'Delivery_location_latitude'],
                                        data.loc[i, 'Delivery_location_longitude'])

print(data.head())

#splitting data
from sklearn.model_selection import train_test_split
x = np.array(data[["Delivery_person_Age",
                   "Delivery_person_Ratings",
                   "distance"]])
y = np.array(data[["Time_taken(min)"]])
xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.10,
                                                random_state=42)

# creating the LSTM neural network model
from keras.models import Sequential
from keras.layers import Dense, LSTM
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (xtrain.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
model.summary()

# training the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(xtrain, ytrain, batch_size=1, epochs=3)

import numpy as np

print("Yemek Teslimat Süresi Tahmini")
a = int(input("Teslimat Görevlisinin Yaşı: "))
b = float(input("Önceki Teslimatların Puanı: "))
c = int(input("Toplam Mesafe (km): "))

features = np.array([[a, b, c]])
print("Tahmini Teslimat Süresi (Dakika): ", model.predict(features))