# -*- coding: utf-8 -*-
"""SARIMA-ARIMAHisseFiyatTahmini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uXArmX9qPz2ubHFepRdTOeSHED-pIVbe
"""

pip install yfinance

import pandas as pd
import yfinance as yf
import datetime
from datetime import date, timedelta
today = date.today()

d1 = today.strftime("%Y-%m-%d")
end_date = d1
d2 = date.today() - timedelta(days=360)
d2 = d2.strftime("%Y-%m-%d")
start_date = d2

data = yf.download('AAPL',
                      start=start_date,
                      end=end_date,
                      progress=False)
print(data.head())

data["Date"] = data.index
data = data[["Date", "Open", "High",
             "Low", "Close", "Volume"]]
data.reset_index(drop=True, inplace=True)
print(data.head())

"""Yukardaki kısımda biz Yahooda ki hisse senetlerinin bir tanesinin güncel verilerini çekmek istedik onun hakkında işlemler yaptık."""

import pandas as pd
import yfinance as yf
import datetime
from datetime import date, timedelta
today = date.today()

d1 = today.strftime("%Y-%m-%d")
end_date = d1
d2 = date.today() - timedelta(days=365)
d2 = d2.strftime("%Y-%m-%d")
start_date = d2

data = yf.download('GOOG',
                      start=start_date,
                      end=end_date,
                      progress=False)
data["Date"] = data.index
data = data[["Date", "Open", "High", "Low", "Close", "Volume"]]
data.reset_index(drop=True, inplace=True)
print(data.tail())

data = data[["Date", "Close"]]
print(data.head())

import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(data["Date"], data["Close"])

"""seasonal decomposition biz burda Veri setimizin durağan mı yoksa mevsimsel mi olduğunu düzgün bir şekilde kontrol etmek için, zaman serisi verilerini daha iyi anlamak için zaman serisi verilerini trend, mevsimsel ve kalıntılara ayıran mevsimsel ayrıştırma yöntemini kullandık"""

from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt

result = seasonal_decompose(data["Close"],
                            model='multiplicative', period=30)  # Değiştirilen kısım

fig = result.plot()
fig.set_size_inches(15, 10)
plt.show()

pd.plotting.autocorrelation_plot(data["Close"])

from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(data["Close"], lags = 100)

from statsmodels.tsa.arima.model import ARIMA

p, d, q = 5, 1, 2
model = ARIMA(data["Close"], order=(p, d, q))
fitted = model.fit()

print(fitted.summary())

predictions = fitted.predict()
print(predictions)

import statsmodels.api as sm
import warnings
model=sm.tsa.statespace.SARIMAX(data['Close'],
                                order=(p, d, q),
                                seasonal_order=(p, d, q, 12))
model=model.fit()
print(model.summary())

predictions = model.predict(len(data), len(data)+10)
print(predictions)

data["Close"].plot(legend=True, label="Training Data", figsize=(15, 10))
predictions.plot(legend=True, label="Predictions")

# Gerekli kütüphaneleri yükleyelim
import pandas as pd
import yfinance as yf
import datetime
import matplotlib.pyplot as plt
import statsmodels.api as sm
from datetime import date, timedelta
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_pacf
from statsmodels.tsa.arima.model import ARIMA
import warnings

# Kullanıcıdan hisse senedi sembolünü al
hisse = input("Lütfen bir hisse senedi sembolü girin (örnek: AAPL, GOOG, TSLA): ").upper()

# Tarihleri belirle (son 1 yıl)
today = date.today()
d1 = today.strftime("%Y-%m-%d")
end_date = d1
d2 = date.today() - timedelta(days=365)
d2 = d2.strftime("%Y-%m-%d")
start_date = d2

# Hisse verisini indir
print(f"{hisse} için veri çekiliyor...")
data = yf.download(hisse, start=start_date, end=end_date, progress=False)

# Veriyi düzenle
data["Date"] = data.index
data = data[["Date", "Close"]]
data.reset_index(drop=True, inplace=True)

# Veriyi görselleştir
plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 6))
plt.plot(data["Date"], data["Close"], label=f"{hisse} Kapanış Fiyatı")
plt.xlabel("Tarih")
plt.ylabel("Fiyat")
plt.title(f"{hisse} Hisse Senedi Kapanış Fiyatı")
plt.legend()
plt.show()

# Mevsimsel ayrıştırma (Seasonal Decompose)
print("Mevsimsel ayrıştırma yapılıyor...")
result = seasonal_decompose(data["Close"], model='multiplicative', period=30)

fig = result.plot()
fig.set_size_inches(15, 10)
plt.show()

# Otokorelasyon (Autocorrelation) grafiği
pd.plotting.autocorrelation_plot(data["Close"])
plt.show()

# Kısmi Otokorelasyon Grafiği (Partial Autocorrelation)
plot_pacf(data["Close"], lags=50)
plt.show()

# ARIMA Modeli
print("ARIMA modeli eğitiliyor...")
p, d, q = 5, 1, 2
model = ARIMA(data["Close"], order=(p, d, q))
fitted = model.fit()
print(fitted.summary())

# Tahmin yap
print("ARIMA tahminleri yapılıyor...")
predictions = fitted.predict()
print(predictions)

# SARIMA Modeli
print("SARIMA modeli eğitiliyor...")
model_sarima = sm.tsa.statespace.SARIMAX(data['Close'], order=(p, d, q), seasonal_order=(p, d, q, 12))
fitted_sarima = model_sarima.fit()
print(fitted_sarima.summary())

# Gelecek 10 gün için tahmin yap
future_predictions = fitted_sarima.predict(len(data), len(data) + 10)
print(future_predictions)

# Tahminleri çizdir
plt.figure(figsize=(15, 6))
data["Close"].plot(legend=True, label="Gerçek Veri")
future_predictions.plot(legend=True, label="Tahmin")
plt.title(f"{hisse} Fiyat Tahmini")
plt.xlabel("Tarih")
plt.ylabel("Fiyat")
plt.show()

